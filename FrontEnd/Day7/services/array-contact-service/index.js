// the name of this module relative to Day07 folder is
//'./services/array-contact-service' OR
// './services'array-contact-service/index'

const data = require('../../data');

const service = {}
service.updateContact =(id) => {console.error('updateContact not implemented')}
service.deleteContact =(id) => {
    // id must be a number; otherwise throw an error
    // if id is found, then delete the corrospondig contact from data
    // else throw an error showinf id is invalid

    if(typeof id !== 'number') {
        throw new Error('id must be a number');
    }

    const index = data.findIndex(c => c.id ===id);
    if(index === -1) {
        throw new Error('Id not found');
    }
    console.log('Deleted data : ')
    console.log({...data[index]});    
    data.splice(index,1);
    //return data;


}

service.getAllContacts =(pageNum=1, pageSize=10, sortBy = 'id', sortOrder = 'asc') => {
    
    // TODO: sort the data based on the field represented by 'sortBy' parameter
    // if the value of 'sortBy' is not a valid property of a contact, then
    // throw an error. 'sortOrder' may be 'asc' or 'desc' (any other should result
    // in an error being thrown). Based on the sortOrder the data must be sorted.
    
    if(typeof pageNum !== 'number' || pageNum <=0) {
        throw new Error('pageNum must be a number >= 1');
    }
    if(typeof pageSize !== 'number' || pageSize <=1) {
        throw new Error('pageSize must be a number >= 1');
    }
    
    if(!(sortBy in data[0])) {
        throw new Error(`${sortBy} not a property`);
    }
    
    if(sortOrder !== 'asc' && sortOrder !== 'dec') {
        throw new Error('Select asc or dec');
    }
    
    let temp = [...data];
    
    if(sortOrder === 'asc')
    temp.sort((a,b) => a[sortBy] > b[sortBy] ? -1:1);
    else 
    temp.sort((a,b) => a[sortBy] > b[sortBy] ? 1:-1);
    
    const begin = (pageNum-1)*pageSize;
    const end = begin+pageSize;
    
    const newData = temp.slice(begin,end);
    
    return(newData);
}

service.getContactById =(id) => {
    if(typeof id !== 'number') {
        throw new Error('id must be a number');
    }
    
    const index = data.findIndex(c => c.id ===id);
    if(index === -1) {
        return null;
    }
    return {...data[index]};
}

service.createNewContact = (contact) => {
    // contact must be an object with these required fields:
    // firstname, email, phone, city
    // If any of the fields are missing, an error should be thrown
    // with appropriate message. 
    // Check if a contact with email/phone already exists in the array,
    // if yes, then throw an error.
    // 'id' is autogenerated (use the max(id)+1 from the data)

    // if all is well, then contact should be appended to the data

    const properties = Object.keys(contact);
    let requiredProperties = ['firstname', 'email','phone','city'];

    // if(!(requiredProperties.every(val => properties.includes(val)))) {
    //     throw new Error('required properties missing');
    // }
    let missingFields =[];

    requiredProperties.forEach(fld => {
        if(!(fld in contact)) {
            missingFields.push(fld);
        }
    })

    if(missingFields.length >0) {
        throw new Error(`Required Missing fields : ${missingFields}`);
    }

    const phone = data.map(p => p.phone);
    const email = data.map(e => e.email);

    if((email.findIndex(e => e==contact.email)) !==-1 || (phone.findIndex(e => e==contact.phone)) !==-1) {
        throw new Error('email id or phone number already exists');
    }

    const ids = data.map(i => i.id);
    let newId = Math.max(...ids) +1;
    contact.id = newId;
    data.push(contact);
    console.log('New added data : ')
    console.log(service.getContactById(newId));
    

}


module.exports = service;